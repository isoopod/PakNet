"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[540],{7547:e=>{e.exports=JSON.parse('{"functions":[],"properties":[{"name":"params","desc":"Pack schema defining the structure of the packet","lua_type":"Schema","source":{"line":67,"path":"src/types.luau"}},{"name":"returns","desc":"Pack schema defining the strucutre of the return when invoking the packet, if applicable","lua_type":"Schema","source":{"line":71,"path":"src/types.luau"}},{"name":"remoteType","desc":"","lua_type":"RemoteType","source":{"line":74,"path":"src/types.luau"}},{"name":"rateLimit","desc":"","lua_type":"RateLimitSetting?","source":{"line":77,"path":"src/types.luau"}},{"name":"timeout","desc":"","lua_type":"number?","source":{"line":80,"path":"src/types.luau"}}],"types":[{"name":"RemoteType","desc":"Indicates what type(s) of remote event this Remote will need as a string literal  \\n- f : function - enables returns and invoke methods  \\n- r : reliable - a standard remote event, enables the basic methods  \\n- u : unreliable - an unreliable remote event, enables unreliable variants of the basic methods  \\n\\nCombinations of these letters activate each mode. The literal is written in alphabetical order.\\n\\n:::warning\\nUnreliable Remotes have a payload limit of 900 bytes.\\n:::\\n\\nUnreliables are best used for ephemeral events including effects that are only relevant for a short time, or for replicating \\ncontinuously changing data. These events are not resent if they are lost and they do not wait for previously fired events to \\narrive before being processed, potentially resulting in reduced latency and network traffic.","lua_type":"\\"f\\" | \\"r\\" | \\"u\\" | \\"fr\\" | \\"fu\\" | \\"fru\\"","source":{"line":27,"path":"src/types.luau"}},{"name":"RateLimitSettings","desc":"Applies a sliding-window rate limit to the Remote. What this means is that if ***limit*** number of entrances have been made within the last ***window*** seconds,\\nThe action will be rate limited and dropped. When checking, actions from over ***window*** seconds ago will be ignored, hence it is a sliding-window, instead of a\\nfixed window that resets after a number of seconds.  \\n\\nThis is applied on both the server (incoming traffic) and client (outgoing traffic).  \\nThe signal onRateLimited for Server or Client remotes will be fired when the ratelimit is reached.  \\nIf the server rate limit is triggered, that usually means the client is exploiting, as they should not be able to get past their local rate limit otherwise.","fields":[{"name":"global","lua_type":"boolean?","desc":"When true - the rate limit applies for all players, otherwise is per player. Defaults to true."},{"name":"limit","lua_type":"number","desc":"Maximum number of entrances in the window"},{"name":"window","lua_type":"nubmer","desc":"How many seconds the window lasts"}],"source":{"line":43,"path":"src/types.luau"}}],"name":"RemoteSettings","desc":"Defines the structure for creating a Remote in PakNet. Remotes are created using `PakNet.defineRemote` within a `RemoteTable`, which is then mounted to a namespace using `PakNet.mount`.  \\n\\n- **`params` and `returns`**: Both are **Pack Schemas** created with `PakNet.schema`. The `returns` field is only required if the remote includes a function (`\\"f\\"` in `remoteType`).  \\n- **Tuple Support**: If using tuples, you may need to manually assert the type as `PakNet.Schema<arg1, (...vararg)>`, since only the first argument can be inferred.  \\n- **`timeout`**: Determines how long the server waits for a client response when invoking a function. If no value is returned before the timeout expires, the request is dropped and `nil` is returned.  \\n\\n:::tip  \\nSchemas are tuples, but due to Luau\u2019s limitations, only the first argument is properly typed. For now, you can manually assert schema types using `PakNet.Schema<...>`.  \\n\\nUsing tuples allows you to structure data similarly to standard RemoteEvents without adding overhead.  \\n:::","external_types":[{"name":"Schema","url":"https://isoopod.github.io/Pack/api/Schema"}],"source":{"line":64,"path":"src/types.luau"}}')}}]);