"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[571],{4908:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Usage","title":"Usage","description":"In PakNet, creating remotes involves setting up network modules within ReplicatedStorage. These modules return a mounted namespace of remotes that can be accessed and used in your game.","source":"@site/docs/Usage.md","sourceDirName":".","slug":"/Usage","permalink":"/PakNet/docs/Usage","draft":false,"unlisted":false,"editUrl":"https://github.com/isoopod/PakNet/edit/main/docs/Usage.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Installation","permalink":"/PakNet/docs/Installation"}}');var s=t(4848),r=t(8453);const a={sidebar_position:3},o="Usage",l={},c=[{value:"Creating Remotes",id:"creating-remotes",level:3},{value:"Organizational Tips:",id:"organizational-tips",level:3},{value:"Defining Remotes",id:"defining-remotes",level:3},{value:"Using Remotes",id:"using-remotes",level:2},{value:"Key Changes:",id:"key-changes",level:3},{value:"Access Based on Remote Type:",id:"access-based-on-remote-type",level:3},{value:"Common Access:",id:"common-access",level:3}];function d(e){const n={admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"usage",children:"Usage"})}),"\n",(0,s.jsxs)(n.p,{children:["In PakNet, creating remotes involves setting up network modules within ",(0,s.jsx)(n.code,{children:"ReplicatedStorage"}),". These modules return a mounted namespace of remotes that can be accessed and used in your game."]}),"\n",(0,s.jsx)(n.h3,{id:"creating-remotes",children:"Creating Remotes"}),"\n",(0,s.jsxs)(n.p,{children:["To create remotes, you'll need to use the ",(0,s.jsx)(n.code,{children:"PakNet:Mount"})," function. This function mounts a remote namespace, where each remote is a key-value pair that represents a remote definition."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"PakNet:Mount(file: Instance, namespace: RemoteTable)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"file"}),": The ",(0,s.jsx)(n.code,{children:"Instance"})," where remote instances will be created (usually ",(0,s.jsx)(n.code,{children:"script"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"namespace"}),": A table that holds the remote definitions."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Do not mount multiple namespaces to the same file. This can cause name collisions and break everything \u2014 even if the namespaces don't overlap."})}),"\n",(0,s.jsx)(n.h3,{id:"organizational-tips",children:"Organizational Tips:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Typically, you'll mount the remote directly to the current script."}),"\n",(0,s.jsx)(n.li,{children:"If you want to create multiple namespaces within a single script for better organization, create folders under the module for each namespace and mount to those."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"defining-remotes",children:"Defining Remotes"}),"\n",(0,s.jsx)(n.p,{children:"A remote table is essentially a map where each key is the remote name, and the value is the remote's definition. To define a remote, use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"PakNet:DefineRemote(settings: RemoteSettings)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RemoteSettings"})," is a dictionary with the following fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"params"})," ",(0,s.jsx)(n.em,{children:"(required)"}),": A PakNet schema that defines the parameters for the remote."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"returns"})," ",(0,s.jsx)(n.em,{children:"(required for remote functions only)"}),": A PakNet schema that defines the return values for the remote function."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"remoteType"})," ",(0,s.jsx)(n.em,{children:"(required)"}),": Specifies the type of remote. It can be any combination of the following:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"f"'}),": RemoteFunction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"r"'}),": RemoteEvent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"u"'}),": UnreliableRemoteEvent"]}),"\n",(0,s.jsxs)(n.li,{children:["Combinations like ",(0,s.jsx)(n.strong,{children:'"fr"'}),", ",(0,s.jsx)(n.strong,{children:'"fu"'}),", ",(0,s.jsx)(n.strong,{children:'"ru"'}),", and ",(0,s.jsx)(n.strong,{children:'"fru"'})," can also be used for remotes that have multiple types (e.g., a remote that is both a RemoteFunction and a RemoteEvent, also note that it is always written in alphabetical order)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"rateLimit"})," ",(0,s.jsx)(n.em,{children:"(optional)"}),": A table that specifies rate limiting for the remote."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"global"}),": Boolean indicating whether the rate limit applies globally or per player."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"limit"}),": The maximum number of requests allowed within a specified window."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"window"}),": The duration in seconds that defines the rate limit window."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"timeout"})," ",(0,s.jsx)(n.em,{children:"(optional)"}),": A number specifying the timeout duration (in seconds) for remote functions."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="networkExample.luau"',children:'local PakNet = require(path.to.PakNet)\n\n-- We will mount this namespace on the current script\nlocal namespace = PakNet:Mount(script, {\n    -- The name of the remote is the key, and the value is a remote configuration, created with PakNet:DefineRemote()\n    SomeRemoteEvent = PakNet:DefineRemote({\n        -- params is a schema defining how to read and write the packet.\n        -- PakNet:Schema is used the same as Pack:Define\n        params = PakNet:Schema(PakNet.String16),\n        -- remoteType is a string telling PakNet what instances we need for the remote\n        -- If it contains "r", a RemoteEvent will be created\n        remoteType = "r",\n    }),\n\n    SomeUnreliableEvent = PakNet:DefineRemote({\n        -- If we are using a tuple schema, we have to assert the type due to luau being unable to capture the generic pack\n        -- Hovering over the datatype will show you what the type is defined at if you are unsure\n        params = PakNet:Schema(PakNet.Float64, PakNet.Vector3) :: PakNet.Schema<number, vector>,\n        -- If remoteType contains "u", an UnreliableRemoteEvent will be created\n        remoteType = "u",\n        -- We can attach a ratelimit to our remote, to prevent it being spammed\n        rateLimit = {\n            limit = 60, -- Allows 60 requests\n            window = 3, -- per 3 seconds \n        },\n    }),\n\n    SomeRemoteFunction = PakNet:DefineRemote({\n        params = PakNet:Schema(PakNet.Array(PakNet.Double)),\n        -- When we have a remote function, we have to specify the return schema as well\n        returns = PakNet:Schema(PakNet.UInt),\n        -- If remoteType contains "f", a RemoteFunction will be created\n        remoteType = "f",\n        -- We can set a timeout for remote functions, after which requests will be cancelled and nil will be returned\n        timeout = 5,\n    }),\n\n    SomeEverythingEvent = PakNet:DefineRemote({\n        -- Heres an example of a more complex schema\n        params = PakNet:Schema(PakNet.Dictionary({\n            Name = PakNet.String16,\n            Level = PakNet.UByte,\n            CFrame = PakNet.CFrame,\n            Buildings = PakNet.Map(PakNet.Vector3, PakNet.Instance),\n        })),\n        returns = PakNet:Schema(PakNet.Array(PakNet.nullable(PakNet.Double))),\n        -- We can combine remote types, but they must be in alphabetical order\n        -- For example you could also use "fr" "fu" or "ru"\n        remoteType = "fru",\n        rateLimit = {\n            limit = 10, -- Allows 10 requests\n            window = 1, -- per second\n        },\n        timeout = 15,\n    }),\n})\n\n-- You can pass through the global signal function, if you find that useful\n-- Nice if you have a centralized network module, rarther than many separate namespaces\nnamespace.Signal = PakNet:LoadGlobalSignal()\n\nreturn namespace\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["When defining a tuple Schema (one with multiple arguments), you have to assert the type as ",(0,s.jsx)(n.code,{children:"PakNet.Schema<...>"})]}),(0,s.jsxs)(n.p,{children:["When you have complicated data structures, it can be annoying to convert them into standard types.",(0,s.jsx)(n.br,{}),"\n","You can copy the definition inside the function and surround it in ",(0,s.jsx)(n.code,{children:"typeof()"})," instead of writing it out with types as well."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:" params = PakNet:Schema(PakNet.Dictionary({\n    Name = PakNet.String16,\n    Level = PakNet.UByte,\n}, PakNet.Int)) :: PakNet.Schema<typeof(PakNet.Dictionary({\n    Name = PakNet.String16,\n    Level = PakNet.UByte,\n}), typeof(PakNet.Int)>\n"})})]}),"\n",(0,s.jsx)(n.p,{children:"How you organize namespaces is up to you. You might want to create a centralized network module with all remotes inside it, or you might want to create multiple network modules for different things."}),"\n",(0,s.jsx)(n.h2,{id:"using-remotes",children:"Using Remotes"}),"\n",(0,s.jsx)(n.p,{children:"Remotes in PakNet have a unified API that combines both server and client functionality. Some changes have been made to the API to simplify naming conventions and add new features."}),"\n",(0,s.jsx)(n.h3,{id:"key-changes",children:"Key Changes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Unified API"}),": Server and client remote methods are combined. For example:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FireClient"})," is now just ",(0,s.jsx)(n.code,{children:"Fire"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OnServerEvent"})," is now ",(0,s.jsx)(n.code,{children:"OnEvent"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The names on the client side remain the same."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"New Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server-only additions"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sanity Checks"}),": Allows directly linking sanity checks to the remote through ",(0,s.jsx)(n.code,{children:"AddSanityCheck"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FireList"})," and ",(0,s.jsx)(n.code,{children:"FireExcept"}),": Variants of the ",(0,s.jsx)(n.code,{children:"Fire"})," method."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OnCheckFail"}),": Fires when an incoming packet fails the sanity checks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OnParseError"}),": Fires when an incoming packet fails to deserialize."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async Methods"}),": Both server and client have:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"InvokeAsync"})," (on the client, it's called ",(0,s.jsx)(n.code,{children:"InvokeServerAsync"}),"): A non-blocking version of ",(0,s.jsx)(n.code,{children:"Invoke"})," that returns a Promise."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limiting"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OnRateLimited"})," event: Triggers when a player is rate-limited."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Unreliable Variants"}),": All ",(0,s.jsx)(n.code,{children:"Fire"})," methods have unreliable variants that use a ",(0,s.jsx)(n.code,{children:"UnreliableRemoteEvent"})," instead of a ",(0,s.jsx)(n.code,{children:"RemoteEvent"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"access-based-on-remote-type",children:"Access Based on Remote Type:"}),"\n",(0,s.jsx)(n.p,{children:"The parts of the API you can use depend on whether you\u2019re on the server or client and the remote's type. Here\u2019s a breakdown:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"f" (Functions)'}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Unlocks ",(0,s.jsx)(n.code,{children:"OnInvoke"}),", ",(0,s.jsx)(n.code,{children:"OnClientInvoke"}),", ",(0,s.jsx)(n.code,{children:"Invoke"}),", ",(0,s.jsx)(n.code,{children:"InvokeAsync"}),", ",(0,s.jsx)(n.code,{children:"InvokeServer"}),", and ",(0,s.jsx)(n.code,{children:"InvokeServerAsync"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"r" (Remote)'}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Unlocks ",(0,s.jsx)(n.code,{children:"OnEvent"}),", ",(0,s.jsx)(n.code,{children:"OnClientEvent"}),", ",(0,s.jsx)(n.code,{children:"Fire"}),", ",(0,s.jsx)(n.code,{children:"FireAll"}),", ",(0,s.jsx)(n.code,{children:"FireList"}),", ",(0,s.jsx)(n.code,{children:"FireExcept"}),", and ",(0,s.jsx)(n.code,{children:"FireServer"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"u" (Unreliable)'}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Unlocks ",(0,s.jsx)(n.code,{children:"OnEvent"}),", ",(0,s.jsx)(n.code,{children:"OnClientEvent"}),", ",(0,s.jsx)(n.code,{children:"FireUnreliable"}),", ",(0,s.jsx)(n.code,{children:"FireAllUnreliable"}),", ",(0,s.jsx)(n.code,{children:"FireListUnreliable"}),", ",(0,s.jsx)(n.code,{children:"FireExceptUnreliable"}),", and ",(0,s.jsx)(n.code,{children:"FireServerUnreliable"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-access",children:"Common Access:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server"})," always has access to the ",(0,s.jsx)(n.code,{children:"OnParseError"})," event."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Both server and client"})," always have access to the ",(0,s.jsx)(n.code,{children:"OnRateLimited"})," event and the ",(0,s.jsx)(n.code,{children:"ClassName"}),' property (which indicates whether the current context is "Server" or "Client").']}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="ClientExample.luau"',children:'local network = require(game:GetService("ReplicatedStorage"):WaitForChild("networkExample"))\n\nnetwork.SomeRemoteEvent:FireServer("Hello World!")\n\n-- Send SomeUnreliableEvent faster than the rate limit\nnetwork.SomeUnreliableEvent.OnRateLimited:Connect(function()\n    print("Rate Limited")\n    -- >>> Rate Limited (x40)\nend)\n\nfor i = 1, 100 do\n    network.SomeUnreliableEvent:FireServerUnreliable(i, Vector3.new(i, i, i))\nend\n\nprint(network.SomeRemoteFunction:InvokeServer({\n    Name = "Bob",\n    Level = 9001,\n    CFrame = CFrame.identity,\n    Buildings = {},\n}))\n-- >>> 9001\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="ServerExample.luau"',children:'local network = require(game:GetService("ReplicatedStorage"):WaitForChild("networkExample"))\n\n-- A big benefit of schemas is that you get proper typings, so message will default to string in this example\nnetwork.SomeRemoteEvent.OnEvent:Connect(function(message)\n    print(message)\n    -- >>> Hello World!\nend)\n\nnetwork.SomeUnreliableEvent.OnEvent:Connect(function(num, vector)\n    print(num)\n    -- The client ratelimit will stop it at 60\n    -- >>> 1 ... 60\nend)\n\nnetwork.SomeRemoteFunction.OnInvoke = function(player, data)\n    print(data)\n    --[[ >>>{\n                ["Buildings"] = {},\n                ["CFrame"] = 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,\n                ["Level"] = 9001,\n                ["Name"] = "Bob"\n            }\n    ]]\n    \n    return data.Level\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);