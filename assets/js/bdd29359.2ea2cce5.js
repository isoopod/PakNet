"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[337],{8415:e=>{e.exports=JSON.parse('{"functions":[{"name":"FireServer","desc":"","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":47,"path":"src/Client.luau"}},{"name":"FireServerUnreliable","desc":":::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Client:FireServer].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":69,"path":"src/Client.luau"}},{"name":"InvokeServer","desc":"Invokes `OnClientInvoke` on the client side, halting the thread until `OnClientInvoke` returns or the invocation times out, determined by the remote settings.  \\nWill return nil if the invocation times out or the return value does not pass all the sanity tests.\\n\\n:::warning\\nIf the server never returns anything, the thread will be left yielding forever unless a timeout is specified.\\n:::","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"..any"}],"returns":[{"desc":"The return tuple specified by the returns schema, or nil if it times out","lua_type":"...any"}],"function_type":"method","yields":true,"source":{"line":93,"path":"src/Client.luau"}},{"name":"InvokeServerAsync","desc":"Asynchronous variant of [Client.InvokeServer] that does not block the calling thread, and instead returns a Promise  \\n\\n:::warning\\nWithout an timeout set, the promise can yield forever if the server never returns anything.\\n\\nYou could use the Promise:timeout(n) method as well, just make sure to do this everywhere if you are removing the timeout.  \\nYou may want to set timeout very high as opposed to removing it, as without it the promise will raise a warning after 15 seconds.\\n:::","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"..any"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","source":{"line":155,"path":"src/Client.luau"}}],"properties":[{"name":"OnClientEvent","desc":"A signal that fires when a Remote is fired from the server with Fire or FireUnreliable (and their variants)\\n\\t","lua_type":"Signal","source":{"line":225,"path":"src/Client.luau"}},{"name":"OnRateLimited","desc":"A signal that fires when the client-side ratelimit rejects sending packet.\\nThis can be used to figure out when you have exhausted your budget for the remote.\\n\\t","lua_type":"Signal","source":{"line":233,"path":"src/Client.luau"}},{"name":"OnClientInvoke","desc":"When using a remote function from server to client, the OnClientInvoke handler must be assigned on the client. This is the same as regular remote functions.  \\nThe function must take in the `params` tuple, and return the `returns` tuple.\\n\\n```lua\\n-- example.client.luau\\n\\n-- SomeRemoteFunction is a remote with remoteType `f`, param of `Boolean` and return of `String8`\\nnetwork.SomeRemoteFunction.OnClientInvoke = function(player, val: boolean)\\n\\tif val then\\n\\t\\treturn \\"True\\"\\n\\telse\\n\\t\\treturn \\"False\\"\\n\\tend\\nend\\n```\\n\\n:::tip\\nYou should set a timeout value in your remote settings if you are using `OnClientInvoke`\\n:::\\n\\t","lua_type":"((any...) -> (any...))?","source":{"line":258,"path":"src/Client.luau"}}],"types":[],"name":"Client","desc":"While a created remote has the type of both Server and Client, You will only have access to the properties and methods here in scripts on the Client Side.\\nClient remotes in PakNet allow clients to send data to the server, request information via remote functions, and listen for server events.","source":{"line":212,"path":"src/Client.luau"}}')}}]);