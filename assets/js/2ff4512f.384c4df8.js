"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[439],{11:e=>{e.exports=JSON.parse('{"functions":[{"name":"Fire","desc":"","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":44,"path":"src/Server.luau"}},{"name":"FireAll","desc":"Fires to all players in the server","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":57,"path":"src/Server.luau"}},{"name":"FireList","desc":"","params":[{"name":"players","desc":"The list of players to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":68,"path":"src/Server.luau"}},{"name":"FireExcept","desc":"Fires to all players except those included in the except table","params":[{"name":"except","desc":"The list of players not to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":80,"path":"src/Server.luau"}},{"name":"FireUnreliable","desc":":::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Server:Fire].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":99,"path":"src/Server.luau"}},{"name":"FireAllUnreliable","desc":"Fires to all players in the server\\n\\n:::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Sever:FireAll].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":120,"path":"src/Server.luau"}},{"name":"FireListUnreliable","desc":":::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Server:FireList].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"players","desc":"The list of players to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":139,"path":"src/Server.luau"}},{"name":"FireExceptUnreliable","desc":"Fires to all players except those included in the except table\\n\\n:::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Server:FireExcept].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"except","desc":"The list of players not to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":159,"path":"src/Server.luau"}},{"name":"Invoke","desc":":::danger\\nInvoking the client from the server should always be done with a timeout set in the remote settings.  \\nIn the event an exploiter modifies the client invoke callback to never return, \\nnot having a callback will cause that thread to yield forever on the server, piling up in memory.  \\n\\nMany people will tell you never to invoke the client from the server in general, but there are valid use cases and its up to you if you want to use something or not. \\n:::","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"..any"}],"returns":[{"desc":"The return tuple specified by the returns schema, or nil if it times out","lua_type":"...any"}],"function_type":"method","yields":true,"source":{"line":182,"path":"src/Server.luau"}},{"name":"InvokeAsync","desc":"Asynchronous variant of Invoke that does not block the calling thread, and instead returns a Promise  \\n\\n:::danger\\nWithout an timeout set, the promise can yield forever.\\n\\nYou could use the Promise:timeout(n) method as well, just make sure to do this everywhere if you are removing the timeout.  \\nYou may want to set timeout very high as opposed to removing it, as without it the promise will raise a warning after 15 seconds.\\n:::","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"..any"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","source":{"line":241,"path":"src/Server.luau"}}],"properties":[{"name":"onEvent","desc":"A signal that fires when a Remote is fired with FireServer or FireServerUnreliable from the client\\nif self._events.r or self._events.u then self.onEvent = LemonSignal.new() end\\n\\t","lua_type":"Signal","source":{"line":299,"path":"src/Server.luau"}},{"name":"onRateLimited","desc":"A signal that fires when the server-side ratelimit rejects a packet. Sends the player that tripped the ratelimit (even if global).\\nThis can be a sign of tampering, but there may still be cases where flucuations in network latency cause false positives.\\nThe server rate limit is adjusted to be slightly less strict than the client rate limit to compensate for this.\\n\\t","lua_type":"Signal","source":{"line":307,"path":"src/Server.luau"}},{"name":"onParseError","desc":"A signal that fires when parsing an incoming packet errors. Sends the player that caused the parse error, followed by the error.\\nIf this happens, it means either a client is tampering with something or you have an issue with your remotes on the client side.\\nI would recommend\\n\\t","lua_type":"Signal","source":{"line":316,"path":"src/Server.luau"}}],"types":[],"name":"Server","desc":"","external_types":[{"name":"Signal","url":"https://data-oriented-house.github.io/LemonSignal/classes/signal.html"},{"name":"Promise","url":"https://eryn.io/roblox-lua-promise/api/Promise"}],"source":{"line":285,"path":"src/Server.luau"}}')}}]);