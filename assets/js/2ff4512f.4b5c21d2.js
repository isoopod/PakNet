"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[439],{11:e=>{e.exports=JSON.parse('{"functions":[{"name":"Fire","desc":"","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":68,"path":"src/Server.luau"}},{"name":"FireAll","desc":"Fires to all players in the server","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":81,"path":"src/Server.luau"}},{"name":"FireList","desc":"","params":[{"name":"players","desc":"The list of players to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":92,"path":"src/Server.luau"}},{"name":"FireExcept","desc":"Fires to all players except those included in the except table","params":[{"name":"except","desc":"The list of players not to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":104,"path":"src/Server.luau"}},{"name":"FireUnreliable","desc":":::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Server:Fire].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":123,"path":"src/Server.luau"}},{"name":"FireAllUnreliable","desc":"Fires to all players in the server\\n\\n:::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Sever:FireAll].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":144,"path":"src/Server.luau"}},{"name":"FireListUnreliable","desc":":::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Server:FireList].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"players","desc":"The list of players to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":163,"path":"src/Server.luau"}},{"name":"FireExceptUnreliable","desc":"Fires to all players except those included in the except table\\n\\n:::warning[Unreliable]\\nThis is the UnreliableRemoteEvent version of [Server:FireExcept].  \\nUnreliable variants can have reduced network traffic, at the cost of having a payload limit of 900 bytes, being unordered, and not guaranteed to be recieved.  \\nThis makes them good for non-essential events such as those for VFX, or constantly updating data that needs to be replicated.\\n:::","params":[{"name":"except","desc":"The list of players not to send to","lua_type":"{Player}"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"...any"}],"returns":[],"function_type":"method","source":{"line":183,"path":"src/Server.luau"}},{"name":"Invoke","desc":"Invokes `OnClientInvoke` on the client side, halting the thread until `OnClientInvoke` returns or the invocation times out, determined by the remote settings.  \\nWill return nil if the invocation times out or the return value does not pass all the sanity tests.\\n\\n:::warning\\nInvoking the client from the server should always be done with a timeout set in the remote settings.  \\nIn the event an exploiter modifies the client invoke callback to never return, \\nnot having a callback will cause that thread to yield forever on the server, piling up in memory.  \\n\\nMany people will tell you never to invoke the client from the server in general, but there are valid use cases and its up to you if you want to use something or not. \\n:::","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"..any"}],"returns":[{"desc":"The return tuple specified by the returns schema, or nil if it times out","lua_type":"...any"}],"function_type":"method","yields":true,"source":{"line":208,"path":"src/Server.luau"}},{"name":"InvokeAsync","desc":"Asynchronous variant of [Server.Invoke] that does not block the calling thread, and instead returns a Promise  \\n\\n:::warning\\nWithout an timeout set, the promise can yield forever.\\n\\nYou could use the Promise:timeout(n) method as well, just make sure to do this everywhere if you are removing the timeout.  \\nYou may want to set timeout very high as opposed to removing it, as without it the promise will raise a warning after 15 seconds.\\n:::","params":[{"name":"to","desc":"","lua_type":"Player"},{"name":"args","desc":"The arguments tuple specified by the params schema","lua_type":"..any"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","source":{"line":285,"path":"src/Server.luau"}},{"name":"AddSanityCheck","desc":"Directly attaches a sanity check to the remote, that will be checked before firing the OnEvent signal. \\nYou can use this to avoid repeating input validation when you want to connect to the event in multiple places.\\nMultiple sanity checks can be added to the same remote.\\n\\nThe check is considered to be failed if it returns false or throws an error. If throwing an error, the error will be passed to the `OnCheckFail` signal.\\nThis lets you use assertions in your sanity checks, as they will be caught and handled by PakNet. True does not need to be explicitly returned.\\n\\nSanity checks are also called for the return value of invokes.","params":[{"name":"check","desc":"","lua_type":"(player: Player, ...any) -> boolean"}],"returns":[],"function_type":"method","source":{"line":353,"path":"src/Server.luau"}}],"properties":[{"name":"OnEvent","desc":"A signal that fires when a Remote is fired from the client with FireServer or FireServerUnreliable (and their variants)\\n\\t","lua_type":"Signal","source":{"line":385,"path":"src/Server.luau"}},{"name":"OnRateLimited","desc":"A signal that fires when the server-side ratelimit rejects a packet. Sends the player that tripped the ratelimit (even if global).\\nThis can be a sign of tampering, but there may still be cases where flucuations in network latency cause false positives.\\nThe server rate limit is adjusted to be slightly less strict than the client rate limit to compensate for this.\\n\\t","lua_type":"Signal","source":{"line":394,"path":"src/Server.luau"}},{"name":"OnParseError","desc":"A signal that fires when parsing an incoming packet errors. Sends the player that caused the parse error, followed by the error.\\nIf this happens, it means either a client is tampering with something or you have an issue with your remotes on the client side.\\n\\t","lua_type":"Signal","source":{"line":402,"path":"src/Server.luau"}},{"name":"OnCheckFail","desc":"A signal that fires when a sanity check attached to the remote fails. Sends the player which sent the packet that failed the check, as well as the error message.\\n\\t","lua_type":"Signal","source":{"line":409,"path":"src/Server.luau"}},{"name":"OnInvoke","desc":"When using a remote function from client to server, the OnInvoke handler must be assigned on the server. This is used in the same way as regular remote functions.  \\nThe function must take in a player and the `params` tuple, and return the `returns` tuple.\\n\\n```lua\\n-- example.server.luau\\n\\n-- SomeRemoteFunction is a remote with remoteType `f`, param of `Boolean` and return of `String8`\\nnetwork.SomeRemoteFunction.OnInvoke = function(player, val: boolean)\\n\\tif val then\\n\\t\\treturn \\"True\\"\\n\\telse\\n\\t\\treturn \\"False\\"\\n\\tend\\nend\\n```\\n\\t","lua_type":"((player: Player, any...) -> (any...))?","source":{"line":430,"path":"src/Server.luau"}}],"types":[],"name":"Server","desc":"While a created remote has the type of both Server and Client, You will only have access to the properties and methods here in scripts on the Server Side.\\nServer remotes in PakNet allow the server to listen for client events, send data to specific clients, and enforce security measures such as rate limiting and sanity checks.\\n\\nServer remotes include additional security and utility features:  \\n- **Sanity Checks**: Built-in support for validating incoming data before processing.  \\n- **Rate Limiting**: Prevents spam by enforcing request limits per player or globally.  \\n- **Tamper Detection**: Events fire when a packet is malformed or fails to deserialize.  ","external_types":[{"name":"Signal","url":"https://data-oriented-house.github.io/LemonSignal/classes/signal.html"},{"name":"Promise","url":"https://eryn.io/roblox-lua-promise/api/Promise"}],"source":{"line":370,"path":"src/Server.luau"}}')}}]);