"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[540],{7547:e=>{e.exports=JSON.parse('{"functions":[],"properties":[{"name":"params","desc":"Pack schema defining the structure of the packet","lua_type":"any","source":{"line":68,"path":"src/types.luau"}},{"name":"returns","desc":"Pack schema defining the strucutre of the return when invoking the packet, if applicable","lua_type":"any?","source":{"line":72,"path":"src/types.luau"}},{"name":"remoteType","desc":"","lua_type":"RemoteType","source":{"line":75,"path":"src/types.luau"}},{"name":"rateLimit","desc":"","lua_type":"RateLimitSetting?","source":{"line":78,"path":"src/types.luau"}},{"name":"timeout","desc":"","lua_type":"number?","source":{"line":81,"path":"src/types.luau"}}],"types":[{"name":"RemoteType","desc":"Indicates what type(s) of remote event this Remote will need as a string literal  \\n- f : function - enables returns and invoke methods  \\n- r : reliable - a standard remote event, enables the basic methods  \\n- u : unreliable - an unreliable remote event, enables unreliable variants of the basic methods  \\n\\nCombinations of these letters activate each mode. The literal is written in alphabetical order.\\n\\n:::warning\\nUnreliable Remotes have a payload limit of 900 bytes.\\n:::\\n\\nUnreliables are best used for ephemeral events including effects that are only relevant for a short time, or for replicating \\ncontinuously changing data. These events are not resent if they are lost and they do not wait for previously fired events to \\narrive before being processed, potentially resulting in reduced latency and network traffic.","lua_type":"\\"f\\" | \\"r\\" | \\"u\\" | \\"fr\\" | \\"fu\\" | \\"fru\\"","source":{"line":27,"path":"src/types.luau"}},{"name":"RateLimitSettings","desc":"Applies a sliding-window rate limit to the Remote. What this means is that if ***limit*** number of entrances have been made within the last ***window*** seconds,\\nThe action will be rate limited and dropped. When checking, actions from over ***window*** seconds ago will be ignored, hence it is a sliding-window, instead of a\\nfixed window that resets after a number of seconds.  \\n\\nThis is applied on both the server (incoming traffic) and client (outgoing traffic).  \\nThe signal onRateLimited for Server or Client remotes will be fired when the ratelimit is reached.  \\nIf the server rate limit is triggered, that usually means the client is exploiting, as they should not be able to get past their local rate limit otherwise.","fields":[{"name":"global","lua_type":"boolean?","desc":"When true - the rate limit applies for all players, otherwise is per player. Defaults to true."},{"name":"limit","lua_type":"number","desc":"Maximum number of entrances in the window"},{"name":"window","lua_type":"nubmer","desc":"How many seconds the window lasts"}],"source":{"line":43,"path":"src/types.luau"}}],"name":"RemoteSettings","desc":"(type for params and returns TODO until Pack documentation is ready)\\n\\nProvides the structure for creating a Remote in PakNet. These will be created with `PakNet.defineRemote` in the RemoteTable when creating a namespace with `PakNet.mount`\\n\\nparams and returns (returns are only needed if the function RemoteType is active) are Pack Schemas created with `PakNet.schema`  \\nIf making use of the tuple support, you will need to assert the type of this to `PakNet.Schema<arg1, (...vararg)>`, as only the first arg can be infered.\\ntimeout is how long the server will wait when invoking the client. If a value is not return before timeout, the request will be dropped and return nil. \\n\\n:::tip\\nSchemas are tuples, however because of luau limitations meaning higer-level polymorphism is not possible right now, only the first argument will be properly typed.  \\nYou can manually assert the type of schemas with the PakNet.Schema<...> type for now.  \\nUsing these tuples can be helpful and allows you to structure your data closer to how you can in regular remote events, without any overhead.\\n:::","source":{"line":65,"path":"src/types.luau"}}')}}]);